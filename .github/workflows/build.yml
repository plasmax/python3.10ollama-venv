name: Setup Python Environment
on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container: alpine:3.18

    steps:
      - name: Install build dependencies
        run: |
          apk add --no-cache \
            build-base \
            wget \
            zlib-dev \
            openssl-dev \
            libbz2 \
            bzip2-dev \
            xz-dev \
            libffi-dev \
            ncurses-dev \
            linux-headers \
            gcompat \
            ldd

      # Install glibc compatibility layer for CentOS 7 compatibility
      - name: Install glibc compatibility
        run: |
          wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
          wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
          apk add --no-cache glibc-2.28-r0.apk

      - name: Install Python 3.10 from source
        run: |
          cd /tmp
          wget https://www.python.org/ftp/python/3.10.13/Python-3.10.13.tgz
          tar xzf Python-3.10.13.tgz
          cd Python-3.10.13
          # Configure with static linking where possible and targeting older glibc
          CFLAGS="-Os -fPIC" CXXFLAGS="-Os -fPIC" \
          LDFLAGS="-Wl,--strip-all -static-libstdc++ -static-libgcc" \
          ./configure \
            --prefix=/usr/local \
            --enable-optimizations \
            --with-ensurepip=install \
            --enable-shared \
            --with-system-ffi
          make -j $(nproc)
          make altinstall
          ln -sf /usr/local/bin/python3.10 /usr/local/bin/python3
          ln -sf /usr/local/bin/pip3.10 /usr/local/bin/pip3

      - name: Verify Python installation
        run: |
          python3 --version
          pip3 --version
          # Verify glibc compatibility
          ldd /usr/local/bin/python3.10

      - name: Create and activate virtual environment
        run: |
          python3 -m venv /opt/venv
          . /opt/venv/bin/activate
          pip3 install --upgrade pip setuptools wheel

      - name: Install required packages
        run: |
          . /opt/venv/bin/activate
          # Install packages with binary compatibility flags
          pip3 install \
            --platform manylinux2014_x86_64 \
            --only-binary=:all: \
            --target=/opt/venv/lib/python3.10/site-packages \
            langchain "chromadb<0.4.0" ollama

      - name: Verify installations
        run: |
          . /opt/venv/bin/activate
          python3 -c "import langchain; import chromadb; print('Packages successfully installed!')"

      - name: Create portable archive
        run: |
          # Include glibc runtime in the archive
          mkdir -p /dist/lib
          cp /usr/glibc-compat/lib/ld-linux-x86-64.so.2 /dist/lib/
          cp /usr/glibc-compat/lib/libc.so.6 /dist/lib/
          
          tar -czf python-env.tar.gz \
            /opt/venv \
            /usr/local/bin/python* \
            /usr/local/lib/python3.10 \
            /usr/local/include/python3.10 \
            /dist/lib/ld-linux-x86-64.so.2 \
            /dist/lib/libc.so.6

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: python-environment
          path: python-env.tar.gz
